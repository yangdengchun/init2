{"ast":null,"code":"import axios from 'axios';\nimport store from '../store';\nimport QS from \"qs\";\naxios.defaults.timeout = 5000; //超市时间是5秒\naxios.defaults.withCredentials = true; //允许跨域\n//Content-Type 响应头\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n// axios.defaults.headers.post['Content-Type'] = 'application/json;charset=UTF-8';\n\n//基础url\naxios.defaults.baseURL = \"http://localhost:9999\";\n// 定义token\n// axios.defaults.headers.common['Authorization-Token'] = store.state.config.token;\n\n// //请求拦截器\n// axios.interceptors.request.use(\n//     config => {\n//         if (store.state.config.token) {\n//             config.headers.common['Authorization-Token'] = store.state.config.token\n//         }\n//         return config;\n//     },\n//     error => {\n//         return Promise.reject(error);\n//     }\n// )\n\n//响应拦截器\naxios.interceptors.response.use(response => {\n  //如果reponse里面的status是200，说明访问到接口了，否则错误\n  // if(response.status == 200){\n  //     return Promise.resolve(response);\n  // }else{\n  //     return Promise.reject(response);\n  // }\n  return response;\n}, error => {\n  // if(error.response.code) {\n  //     switch (error.response.code) {\n  //         case 401:       //未登录\n  //             this.$store.commit('del_token');\n  //             router.replace({\n  //                 path: '/login',\n  //                 query: {\n  //                     redirect: router.currentRoute.fullPath//登录成功后跳入浏览的当前页面\n  //                 }\n  //             });\n  //             break;\n  //         case 404:   //没找到\n  //             break;\n  //     }\n  // }\n  return Promise.reject(error);\n});\n\n/**\r\n * 封装get方法\r\n */\nexport function get(url, params = {}) {\n  return new Promise((resolve, reject) => {\n    axios.get(url, {\n      params: params\n    }).then(response => {\n      resolve(response.data);\n    }).catch(err => {\n      reject(err);\n    });\n  });\n}\n\n// /**\n//  * 封装post方法\n//  */\n// export function post(url,params){\n//     return new Promise((resolve,reject) => {\n//         axios.post(url,Qs.stringify(params))\n//             .then(response =>{\n//                 resolve(response.data);\n//             })\n//             .catch(err =>{\n//                 reject(err);\n//             })\n//     });\n// }\n/**\r\n * post方法，对应post请求\r\n * @param {String} url [请求的url地址]\r\n * @param {Object} params [请求时携带的参数]\r\n * @param {Boolean} json [true：json格式请求头；false：FormData格式请求头]\r\n */\nexport function post(url, params = {}, json = false) {\n  // json格式请求头\n  const headerJSON = {\n    \"Content-Type\": \"application/json\"\n  };\n  // FormData格式请求头\n  const headerFormData = {\n    \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\"\n  };\n  return new Promise((resolve, reject) => {\n    axios.post(url, json ? JSON.stringify(params) : QS.stringify(params), {\n      headers: json ? headerJSON : headerFormData\n    }).then(res => {\n      console.log(res.data);\n      resolve(res.data);\n    }).catch(err => {\n      reject(err.data);\n    });\n  });\n}\n\n/**\r\n * put方法，对应put请求\r\n * @param {String} url [请求的url地址]\r\n * @param {Object} params [请求时携带的参数]\r\n */\nexport function Put(url, params) {\n  return new Promise((resolve, reject) => {\n    axios.put(url, {\n      params: params\n    }).then(response => {\n      resolve(response.data);\n    }).catch(err => {\n      reject(err.data);\n    });\n  });\n}\n/**\r\n * delete方法，对应put请求\r\n * @param {String} url [请求的url地址]\r\n * @param {Object} params [请求时携带的参数]\r\n */\nexport function Delete(url, params) {\n  return new Promise((resolve, reject) => {\n    axios.delete(url, {\n      params: params\n    }).then(response => {\n      resolve(response.data);\n    }).catch(err => {\n      reject(err.data);\n    });\n  });\n}","map":{"version":3,"names":["axios","store","QS","defaults","timeout","withCredentials","headers","post","baseURL","interceptors","response","use","error","Promise","reject","get","url","params","resolve","then","data","catch","err","json","headerJSON","headerFormData","JSON","stringify","res","console","log","Put","put","Delete","delete"],"sources":["D:/developer/vue/resmanger/src/api/http.js"],"sourcesContent":["import axios from 'axios';\r\nimport store from '../store'\r\nimport QS from \"qs\";\r\n\r\naxios.defaults.timeout = 5000;  //超市时间是5秒\r\naxios.defaults.withCredentials = true;  //允许跨域\r\n//Content-Type 响应头\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\r\n// axios.defaults.headers.post['Content-Type'] = 'application/json;charset=UTF-8';\r\n\r\n//基础url\r\naxios.defaults.baseURL = \"http://localhost:9999\";\r\n// 定义token\r\n// axios.defaults.headers.common['Authorization-Token'] = store.state.config.token;\r\n\r\n// //请求拦截器\r\n// axios.interceptors.request.use(\r\n//     config => {\r\n//         if (store.state.config.token) {\r\n//             config.headers.common['Authorization-Token'] = store.state.config.token\r\n//         }\r\n//         return config;\r\n//     },\r\n//     error => {\r\n//         return Promise.reject(error);\r\n//     }\r\n// )\r\n\r\n//响应拦截器\r\naxios.interceptors.response.use(\r\n    response => {\r\n        //如果reponse里面的status是200，说明访问到接口了，否则错误\r\n        // if(response.status == 200){\r\n        //     return Promise.resolve(response);\r\n        // }else{\r\n        //     return Promise.reject(response);\r\n        // }\r\n        return response;\r\n    },\r\n    error => {\r\n        // if(error.response.code) {\r\n        //     switch (error.response.code) {\r\n        //         case 401:       //未登录\r\n        //             this.$store.commit('del_token');\r\n        //             router.replace({\r\n        //                 path: '/login',\r\n        //                 query: {\r\n        //                     redirect: router.currentRoute.fullPath//登录成功后跳入浏览的当前页面\r\n        //                 }\r\n        //             });\r\n        //             break;\r\n        //         case 404:   //没找到\r\n        //             break;\r\n        //     }\r\n        // }\r\n        return Promise.reject(error)\r\n    }\r\n);\r\n\r\n/**\r\n * 封装get方法\r\n */\r\nexport function get(url,params={}){\r\n    return new Promise((resolve,reject) => {\r\n        axios.get(url,{params:params})\r\n            .then(response =>{\r\n                resolve(response.data);\r\n            })\r\n            .catch(err =>{\r\n                reject(err);\r\n            })\r\n    });\r\n}\r\n\r\n// /**\r\n//  * 封装post方法\r\n//  */\r\n// export function post(url,params){\r\n//     return new Promise((resolve,reject) => {\r\n//         axios.post(url,Qs.stringify(params))\r\n//             .then(response =>{\r\n//                 resolve(response.data);\r\n//             })\r\n//             .catch(err =>{\r\n//                 reject(err);\r\n//             })\r\n//     });\r\n// }\r\n/**\r\n * post方法，对应post请求\r\n * @param {String} url [请求的url地址]\r\n * @param {Object} params [请求时携带的参数]\r\n * @param {Boolean} json [true：json格式请求头；false：FormData格式请求头]\r\n */\r\nexport function post(url, params = {}, json = false) {\r\n    // json格式请求头\r\n    const headerJSON = {\r\n        \"Content-Type\": \"application/json\"\r\n    };\r\n    // FormData格式请求头\r\n    const headerFormData = {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\"\r\n    };\r\n    return new Promise((resolve, reject) => {\r\n        axios\r\n            .post(url, json ? JSON.stringify(params) : QS.stringify(params), {\r\n                headers: json ? headerJSON : headerFormData\r\n            })\r\n            .then(res => {\r\n                console.log(res.data)\r\n                resolve(res.data);\r\n            })\r\n            .catch(err => {\r\n                reject(err.data);\r\n            });\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * put方法，对应put请求\r\n * @param {String} url [请求的url地址]\r\n * @param {Object} params [请求时携带的参数]\r\n */\r\nexport function Put(url, params) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.put(url, {params:params})\r\n            .then((response) => {\r\n                resolve(response.data)\r\n            })\r\n            .catch((err) => {\r\n                reject(err.data)\r\n            })\r\n    })\r\n}\r\n/**\r\n * delete方法，对应put请求\r\n * @param {String} url [请求的url地址]\r\n * @param {Object} params [请求时携带的参数]\r\n */\r\nexport function Delete(url, params) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.delete(url, {params:params})\r\n            .then((response) => {\r\n                resolve(response.data)\r\n            })\r\n            .catch((err) => {\r\n                reject(err.data)\r\n            })\r\n    })\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}